name: 'Structurizr export (PNG+SVG via Puppeteer)'
description: 'Export all Structurizr Lite diagrams (from workspace.json) to PNG/SVG using headless Chrome'
inputs:
  structurizr_dir:
    description: 'Path to Structurizr data dir (mounted dir with structurizr.properties and numbered workspace folders)'
    required: true
  port:
    description: 'Host port for Lite HTTP server'
    required: false
    default: '8081'
  lite_tag:
    description: 'Structurizr Lite release tag (e.g. v2025.05.28)'
    required: false
    default: 'v2025.05.28'
  commit_generated:
    description: 'Commit Generated/ back to repo'
    required: false
    default: 'true'

outputs:
  generated_path:
    description: 'Path to the Generated directory'
    value: ${{ steps.set-outputs.outputs.generated_path }}

runs:
  using: "composite"
  steps:
    - name: Setup Java
      uses: actions/setup-java@v4
      with:
        distribution: 'temurin'
        java-version: '21'

    # Cache the Structurizr Lite JAR by version
    - name: Cache Structurizr Lite WAR
      id: cache-lite
      uses: actions/cache@v4
      with:
        path: $HOME/.cache/structurizr-lite/${{ inputs.lite_tag }}/structurizr-lite.war
        key: structurizr-lite-${{ inputs.lite_tag }}

    - name: Download Structurizr Lite WAR (if missing)
      if: steps.cache-lite.outputs.cache-hit != 'true'
      shell: bash
      run: |
        set -euo pipefail
        mkdir -p $HOME/.cache/structurizr-lite/${{ inputs.lite_tag }}
        url="https://github.com/structurizr/lite/releases/download/${{ inputs.lite_tag }}/structurizr-lite.war"
        curl -fL "$url" -o $HOME/.cache/structurizr-lite/${{ inputs.lite_tag }}/structurizr-lite.war

    # Cache node_modules of the action itself (we ship package-lock.json)
    - name: Cache node_modules
      uses: actions/cache@v4
      with:
        path: ${{ github.action_path }}/node_modules
        key: ${{ runner.os }}-node20-${{ hashFiles(format('{0}/package-lock.json', github.action_path)) }}

    # Cache Puppeteer's downloaded Chromium
    - name: Cache Puppeteer Chromium
      uses: actions/cache@v4
      with:
        path: $HOME/.cache/puppeteer
        key: puppeteer-${{ runner.os }}-${{ hashFiles(format('{0}/package-lock.json', github.action_path)) }}

    - name: Install dependencies (Puppeteer)
      shell: bash
      run: |
        set -e
        cd "${{ github.action_path }}"
        npm ci

    - name: Discover workspace folders
      id: discover
      shell: bash
      run: |
        set -euo pipefail
        # list subfolders 1-foo, 2-bar, 3
        mapfile -t WS_DIRS < <(find "${{ inputs.structurizr_dir }}" -maxdepth 1 -mindepth 1 -type d -regex '.*/[0-9]+[-A-Za-z0-9_]*$' | sort)
        echo "Found ${#WS_DIRS[@]} workspace folder(s):"
        printf ' - %s\n' "${WS_DIRS[@]}" || true
        echo "count=${#WS_DIRS[@]}" >> "$GITHUB_OUTPUT"

    - name: Ensure structurizr.properties (multi-workspace)
      shell: bash
      run: |
        set -euo pipefail
        ROOT="${{ inputs.structurizr_dir }}"
        COUNT="${{ steps.discover.outputs.count }}"
        if [ -z "$COUNT" ] || [ "$COUNT" -lt 1 ]; then
          echo "No workspace folders discovered under $ROOT"; exit 1
        fi

        PROPS_FILE="$ROOT/structurizr.properties"
        if [ -f "$PROPS_FILE" ]; then
          # update of insert structurizr.workspaces
          if grep -q '^structurizr.workspaces=' "$PROPS_FILE"; then
            sed -i.bak -E "s/^structurizr.workspaces=.*/structurizr.workspaces=${COUNT}/" "$PROPS_FILE"
          else
            printf "\nstructurizr.workspaces=%s\n" "$COUNT" >> "$PROPS_FILE"
          fi
        else
          cat > "$PROPS_FILE" <<EOF
          # Auto-generated by CI
          structurizr.workspaces=${COUNT}
          EOF
        fi

        echo "----- $PROPS_FILE -----"
        cat "$PROPS_FILE"
        echo "------------------------"

    - name: Start Structurizr Lite (WAR)
      shell: bash
      run: |
        set -euo pipefail
        WAR="$HOME/.cache/structurizr-lite/${{ inputs.lite_tag }}/structurizr-lite.war"
        pushd "${{ github.workspace }}/${{ inputs.structurizr_dir }}" >/dev/null
        nohup java -jar ${WAR} --server.port=${{ inputs.port }} "${{ github.workspace }}/${{ inputs.structurizr_dir }}" \
          > structurizr-lite.log 2>&1 &
        echo $! > structurizr-lite.pid
        popd >/dev/null

    - name: Wait for Lite
      shell: bash
      run: |
        for i in {1..60}; do
          if curl -fsS "http://localhost:${{ inputs.port }}/" >/dev/null; then
            echo "Structurizr Lite is up"
            exit 0
          fi
          sleep 2
        done
        echo "Structurizr Lite not responding" >&2
        # dump last lines
        tail -n 200 "${{ github.workspace }}/${{ inputs.structurizr_dir }}/structurizr-lite.log" || true
        exit 1

    - name: Export diagrams (all workspaces)
      shell: bash
      run: |
        set -euo pipefail
        BASE_URL="http://localhost:${{ inputs.port }}"

        # Match folders like 1-foo, 2-bar, or just 1
        mapfile -t WS_DIRS < <(find "${{ inputs.structurizr_dir }}" -maxdepth 1 -mindepth 1 -type d -regex '.*/[0-9]+[-A-Za-z0-9_]*$' | sort)
        if [ ${#WS_DIRS[@]} -eq 0 ]; then
          echo "No workspace directories found in ${{ inputs.structurizr_dir }}" >&2
          exit 1
        fi

        for d in "${WS_DIRS[@]}"; do
          name="$(basename "$d")"
          id="${name%%-*}"
          if [ ! -f "$d/workspace.json" ]; then
            echo "Skip ${name}: no workspace.json"
            continue
          fi
          out="Generated/${name}"
          mkdir -p "${out}"
          echo "Workspace ${name} (id=${id}) -> ${out}"

          pushd "${out}" >/dev/null
          node "${{ github.action_path }}/scripts/export-diagrams.js" "${BASE_URL}/workspace/${id}/diagrams" svg
          node "${{ github.action_path }}/scripts/export-diagrams.js" "${BASE_URL}/workspace/${id}/diagrams" png
          popd >/dev/null
        done

    - name: Set outputs
      id: set-outputs
      shell: bash
      run: |
        echo "generated_path=Generated" >> "$GITHUB_OUTPUT"

    - name: Stop Lite
      if: always()
      shell: bash
      run: |
        PID_FILE="${{ github.workspace }}/${{ inputs.structurizr_dir }}/structurizr-lite.pid"
        if [ -f "$PID_FILE" ]; then
          kill "$(cat "$PID_FILE")" || true
        fi